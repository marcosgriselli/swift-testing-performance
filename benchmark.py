#!/usr/bin/env python3

import argparse
import subprocess
import re


def _generate_xctest_tests(test_count: int) -> None:
    test_file = "CompilePerformance/XCTestTests/XCTestTests.swift"
    with open(test_file, "w") as f:
        f.write(
            f"""// This file is generated by generate_tests.py
import XCTest
                
final class XCTestTests: XCTestCase {{
        """
        )
        for i in range(test_count):
            f.write(
                f"""
    func testExample{i}() {{
        XCTAssert({i} == {i})
    }}
"""
            )
        f.write("}\n")


def _generate_swift_testing_tests(test_count: int) -> None:
    test_file = "CompilePerformance/SwiftTestingTests/SwiftTestingTests.swift"
    with open(test_file, "w") as f:
        f.write(
            f"""// This file is generated by generate_tests.py
import Testing
                    
struct SwiftTestingTests {{
        """
        )
        for i in range(test_count):
            f.write(
                f"""
    @Test
    func testExample{i}() {{
        #expect({i} == {i})
    }}
"""
            )
        f.write("}\n")


def _xcodebuild_command(scheme: str) -> str:
    project = "-project CompilePerformance/CompilePerformance.xcodeproj"
    destination = "-destination 'platform=iOS Simulator,name=iPhone 15,OS=18.0'"
    return f"xcodebuild {project} -scheme {scheme} {destination} build"


def _benchmark_tests(test_count: int) -> None:
    _generate_swift_testing_tests(test_count)
    _generate_xctest_tests(test_count)

    swift_testing_command = _xcodebuild_command("SwiftTestingTests")
    xctest_command = _xcodebuild_command("XCTestTests")

    subprocess.run(
        [
            "hyperfine",
            "--runs",
            "1",
            "--prepare",
            "rm -rf ~/Library/Developer/Xcode/DerivedData",
            "--command-name",
            f"SwiftTesting ({test_count} tests)",
            swift_testing_command,
            "--command-name",
            f"XCTest ({test_count} tests)",
            xctest_command,
        ]
    )


def _build_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--test_count", help="The number of tests to generate", type=int, required=True
    )
    return parser


def _main(args: argparse.Namespace) -> None:
    test_count = int(args.test_count)
    _benchmark_tests(test_count)


if __name__ == "__main__":
    _main(_build_parser().parse_args())
